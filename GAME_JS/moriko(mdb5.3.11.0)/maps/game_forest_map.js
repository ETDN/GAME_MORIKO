/*(function(name,data){
 if(typeof onTileMapLoaded === 'undefined') {
  if(typeof TileMaps === 'undefined') TileMaps = {};
  TileMaps[name] = data;
 } else {
  onTileMapLoaded(name,data);
 }
 if(typeof module === 'object' && module && module.exports) {
  module.exports = data;
 }})("game_forest_map",
{ "compressionlevel":-1,
 "height":9,
 "infinite":false,
 "layers":[
        {
         "data":[261, 261, 261, 261, 261, 261, 261, 104,
          104, 104, 104, 104, 104, 104, 104, 104, 104,
          104, 104, 38, 39, 40, 41, 42, 43, 44, 202, 202,
          202, 202, 202, 202, 51, 52, 53, 53, 53, 53, 57,
          58, 59, 60, 261, 261, 261, 261, 261, 261, 261,
          261, 261, 261, 261, 104, 104, 104, 104, 104, 104,
          104, 104, 116, 117, 118, 119, 120, 121, 122, 202,
          202, 202, 202, 202, 128, 129, 130, 131, 132, 133,
          134, 135, 136, 137, 138, 261, 261, 160, 161, 162,
          163, 164, 261, 261, 261, 261, 187, 188, 189, 104,
          104, 104, 104, 104, 194, 195, 196, 197, 198, 199,
          200, 202, 202, 202, 204, 205, 206, 207, 208, 209,
          210, 211, 212, 213, 214, 215, 216, 236, 237, 238,
          239, 240, 241, 242, 261, 262, 263, 264, 265, 266,
          267, 268, 261, 261, 270, 271, 272, 273, 274, 275,
          276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
          286, 287, 288, 289, 290, 291, 292, 293, 294, 314,
          315, 316, 317, 318, 319, 320, 339, 340, 341, 342,
          343, 344, 345, 346, 347, 347, 348, 349, 350, 351,
          352, 353, 354, 355, 356, 357, 358, 359, 360, 361,
          362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
          372, 392, 393, 394, 395, 396, 397, 398, 399, 418,
          419, 420, 421, 422, 423, 424, 425, 425, 426, 427,
          428, 429, 430, 430, 432, 433, 434, 435, 436, 437,
          438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
          448, 449, 450, 469, 469, 469, 469, 469, 475, 476,
          477, 478, 497, 498, 501, 501, 501, 501, 502, 503,
          504, 505, 506, 507, 585, 585, 585, 511, 512, 513,
          514, 515, 516, 517, 517, 519, 520, 521, 522, 523,
          524, 525, 526, 527, 528, 547, 547, 547, 548, 548,
          553, 554, 555, 556, 497, 576, 577, 577, 577, 577,
          580, 581, 582, 584, 584, 585, 585, 585, 585, 589,
          590, 591, 592, 593, 594, 595, 596, 597, 598, 599,
          600, 601, 602, 603, 604, 605, 606, 625, 625, 625,
          625, 625, 631, 632, 633, 634, 497, 654, 655, 655,
          655, 657, 658, 659, 660, 661, 662, 663, 585, 585,
          585, 668, 668, 669, 670, 671, 672, 673, 674, 675,
          676, 676, 678, 679, 680, 681, 682, 683, 684],
         "height":9,
         "id":1,
         "name":"Tile Layer 1",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":42,
         "x":0,
         "y":0
        }],
 "nextlayerid":2,
 "nextobjectid":1,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tiledversion":"1.8.2",
 "tileheight":32,
 "tilesets":[
        {
         "firstgid":1,
         "source":"magic-cliffs-PREVIEWx1.tsx"
        }],
 "tilewidth":32,
 "type":"map",
 "version":"1.8",
 "width":42
});*/

const tileAtlas = new Image();
tileAtlas.src = 'moriko(mdb5.3.11.0)/graphics/Magic-Cliffs-Environment/PREVIEWS/magic-cliffs-PREVIEWx1.png';
tileAtlas.onload = drawFunction;

let tileSize = 32;
let tileOutputSize = 1.5 // can set to 1 for 32px or higher
let updatedTileSize = tileSize * tileOutputSize;

let mapHeight = 9;
let mapWidth = 42;

let level1map = [261, 261, 261, 261, 261, 261, 261, 104,
 104, 104, 104, 104, 104, 104, 104, 104, 104,
 104, 104, 38, 39, 40, 41, 42, 43, 44, 202, 202,
 202, 202, 202, 202, 51, 52, 53, 53, 53, 53, 57,
 58, 59, 60, 261, 261, 261, 261, 261, 261, 261,
 261, 261, 261, 261, 104, 104, 104, 104, 104, 104,
 104, 104, 116, 117, 118, 119, 120, 121, 122, 202,
 202, 202, 202, 202, 128, 129, 130, 131, 132, 133,
 134, 135, 136, 137, 138, 261, 261, 160, 161, 162,
 163, 164, 261, 261, 261, 261, 187, 188, 189, 104,
 104, 104, 104, 104, 194, 195, 196, 197, 198, 199,
 200, 202, 202, 202, 204, 205, 206, 207, 208, 209,
 210, 211, 212, 213, 214, 215, 216, 236, 237, 238,
 239, 240, 241, 242, 261, 262, 263, 264, 265, 266,
 267, 268, 261, 261, 270, 271, 272, 273, 274, 275,
 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
 286, 287, 288, 289, 290, 291, 292, 293, 294, 314,
 315, 316, 317, 318, 319, 320, 339, 340, 341, 342,
 343, 344, 345, 346, 347, 347, 348, 349, 350, 351,
 352, 353, 354, 355, 356, 357, 358, 359, 360, 361,
 362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
 372, 392, 393, 394, 395, 396, 397, 398, 399, 418,
 419, 420, 421, 422, 423, 424, 425, 425, 426, 427,
 428, 429, 430, 430, 432, 433, 434, 435, 436, 437,
 438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
 448, 449, 450, 469, 469, 469, 469, 469, 475, 476,
 477, 478, 497, 498, 501, 501, 501, 501, 502, 503,
 504, 505, 506, 507, 585, 585, 585, 511, 512, 513,
 514, 515, 516, 517, 517, 519, 520, 521, 522, 523,
 524, 525, 526, 527, 528, 547, 547, 547, 548, 548,
 553, 554, 555, 556, 497, 576, 577, 577, 577, 577,
 580, 581, 582, 584, 584, 585, 585, 585, 585, 589,
 590, 591, 592, 593, 594, 595, 596, 597, 598, 599,
 600, 601, 602, 603, 604, 605, 606, 625, 625, 625,
 625, 625, 631, 632, 633, 634, 497, 654, 655, 655,
 655, 657, 658, 659, 660, 661, 662, 663, 585, 585,
 585, 668, 668, 669, 670, 671, 672, 673, 674, 675,
 676, 676, 678, 679, 680, 681, 682, 683, 684]


let mapIndex = 0;
let sourceX = 0;
let sourceY = 0;
function draw() {
 for (let col = 0; col < mapHeight; col += tileSize) {
  for (let row = 0; row < mapWidth; row += tileSize) {
   let tileVal = level1Map[mapIndex];
   if(tileVal !=0) {
    tileVal -= 1;
    sourceY = Math.floor(tileVal/atlasCol) * tileSize;
    sourceX = (tileVal % atlasCol) * tileSize;
    ctx.drawImage(tileAtlas, sourceX, sourceY, tileSize,
        tileSize, row * tileOutputSize, col * tileOutputSize,
        updatedTileSize, updatedTileSize);
   }
   mapIndex ++;
  }
 }
}

let tileVal = level1Map[mapindex];
tileVal -= 1;

sourceY = Math.floor(tileVal/atlasCol) * tileSize;
// For a tile originating in the first row of the atlas
sourceY = Math.floor(1/16) * 32;
// For the first tile of this example
// sourceY = Math.floor(16/16) * 32; which will equal 32

sourceX = tileVal * tileSize;

sourceX = (tileVal % atlasCol) * tileSize;
// Our first map tile has the value of 16
// sourceX = (16 % 16) * 32; which would equal 0
// For a tile in the second row and second column
// sourceX = (17 % 16) * 32; which would equal 32
